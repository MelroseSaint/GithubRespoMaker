const express = require('express');
const cors = require('cors');
const multer = require('multer');
const archiver = require('archiver');
const path = require('path');
const fs = require('fs');
const AdmZip = require('adm-zip');
const mime = require('mime-types');

const app = express();
const PORT = 3000;

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// Multer setup for memory storage
const upload = multer({ storage: multer.memoryStorage() });

// Language mapping by file extension
const extToLang = {
  js: 'javascript', jsx: 'javascript', ts: 'typescript', tsx: 'typescript',
  py: 'python', rb: 'ruby', php: 'php', java: 'java', cs: 'csharp',
  go: 'go', rs: 'rust', swift: 'swift', kt: 'kotlin',
  c: 'c', h: 'c', cpp: 'cpp', hpp: 'cpp',
  html: 'html', css: 'css', scss: 'css', less: 'css',
  json: 'config', yaml: 'config', yml: 'config',
  md: 'docs', txt: 'docs',
  sh: 'scripts', bash: 'scripts', ps1: 'scripts'
};

function getLangFolder(filename) {
  const ext = path.extname(filename).replace('.', '').toLowerCase();
  return extToLang[ext] || 'misc';
}

function safeFileName(originalName) {
  return originalName.replace(/[^a-zA-Z0-9._-]/g, '_');
}

// Generate a repository from uploaded files and return as a ZIP
app.post('/api/generate', upload.fields([
  { name: 'files', maxCount: 200 },
  { name: 'zip', maxCount: 1 }
]), async (req, res) => {
  try {
    const requestedName = (req.body.repoName || '').toString().trim();
    const repoName = safeFileName(requestedName) || `repo_${Date.now()}`;
    const repoRoot = path.join(__dirname, 'output', repoName);

    // Ensure base folders
    fs.mkdirSync(repoRoot, { recursive: true });
    fs.mkdirSync(path.join(repoRoot, 'src'), { recursive: true });
    fs.mkdirSync(path.join(repoRoot, 'tests'), { recursive: true });

    // Write a basic README
    const readme = `# ${repoName}\n\nGenerated by RespoGen.\n\nStructure:\n- src/: organized code by language\n- tests/: place tests here\n`;
    fs.writeFileSync(path.join(repoRoot, 'README.md'), readme);

    // Optional: EditorConfig for consistent basic formatting
    const editorconfig = `root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\n`;
    fs.writeFileSync(path.join(repoRoot, '.editorconfig'), editorconfig);

    // Apply template scaffolding
    const template = (req.body.template || 'none').toString();
    if (template === 'node') {
      const nodeIndex = `// Entry point\nconsole.log('Hello from ${repoName}');\n`;
      fs.writeFileSync(path.join(repoRoot, 'src', 'index.js'), nodeIndex);
      fs.writeFileSync(path.join(repoRoot, '.gitignore'), 'node_modules/\n*.log\n');
    } else if (template === 'python') {
      const pyMain = `# Entry point\nprint('Hello from ${repoName}')\n`;
      fs.writeFileSync(path.join(repoRoot, 'src', 'main.py'), pyMain);
      fs.writeFileSync(path.join(repoRoot, 'requirements.txt'), '# add your dependencies here\n');
      fs.writeFileSync(path.join(repoRoot, '.gitignore'), '__pycache__/\n*.pyc\n');
    }

    // If text snippets were provided via form fields, process them
    const snippets = Array.isArray(req.body.snippet) ? req.body.snippet : (req.body.snippet ? [req.body.snippet] : []);
    const snippetNames = Array.isArray(req.body.snippetName) ? req.body.snippetName : (req.body.snippetName ? [req.body.snippetName] : []);

    snippets.forEach((code, idx) => {
      const name = safeFileName(snippetNames[idx] || `snippet_${idx + 1}.txt`);
      const langFolder = getLangFolder(name);
      const destDir = path.join(repoRoot, 'src', langFolder);
      fs.mkdirSync(destDir, { recursive: true });
      fs.writeFileSync(path.join(destDir, name), code);
    });

    // Process uploaded files
    const rawFiles = (req.files && req.files.files) ? req.files.files : [];
    rawFiles.forEach(file => {
      const originalName = safeFileName(file.originalname);
      const langFolder = getLangFolder(originalName);
      const destDir = path.join(repoRoot, 'src', langFolder);
      fs.mkdirSync(destDir, { recursive: true });
      fs.writeFileSync(path.join(destDir, originalName), file.buffer);
    });

    // Process uploaded zip if present
    const zipFiles = (req.files && req.files.zip) ? req.files.zip : [];
    if (zipFiles.length > 0) {
      const zip = new AdmZip(zipFiles[0].buffer);
      const entries = zip.getEntries();
      entries.forEach(entry => {
        if (entry.isDirectory) return;
        const entryName = entry.entryName; // may include subfolders
        const baseName = safeFileName(path.basename(entryName));
        const langFolder = getLangFolder(baseName);
        const subPath = path.dirname(entryName);
        const destDir = path.join(repoRoot, 'src', langFolder, subPath);
        fs.mkdirSync(destDir, { recursive: true });
        const content = entry.getData();
        fs.writeFileSync(path.join(destDir, baseName), content);
      });
    }

    // GitHub-ready project templates
    res.status(200).json({ status: 'ok', repo: repoName });
  } catch (error) {
    console.error('Error generating repository:', error);
    res.status(500).json({ error: 'Failed to generate repository' });
  }
});
const projectTemplates = {
  'react-app': {
    name: 'React Application',
    description: 'A modern React application with best practices',
    structure: {
      'src/': {
        'components/': {},
        'pages/': {},
        'hooks/': {},
        'utils/': {},
        'assets/': {
          'images/': {},
          'styles/': {}
        },
        'App.js': `import React from 'react';
    import './App.css';
    
    function App() {
      return (
        <div className="App">
          <header className="App-header">
            <h1>Welcome to Your React App</h1>
            <p>Start building something amazing!</p>
          </header>
        </div>
      );
    }
    
    export default App;`,
        'App.css': `.App {
      text-align: center;
    }
    
    .App-header {
      background-color: #282c34;
      padding: 20px;
      color: white;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }`,
        'index.js': `import React from 'react';
    import ReactDOM from 'react-dom/client';
    import './index.css';
    import App from './App';
    
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    );`,
        'index.css': `body {
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
        sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }`
      },
      'public/': {
        'index.html': `<!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8" />
        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="theme-color" content="#000000" />
        <meta name="description" content="React application" />
        <title>React App</title>
      </head>
      <body>
        <noscript>You need to enable JavaScript to run this app.</noscript>
        <div id="root"></div>
      </body>
    </html>`,
        'manifest.json': `{
      "short_name": "React App",
      "name": "Create React App Sample",
      "icons": [
        {
          "src": "favicon.ico",
          "sizes": "64x64 32x32 24x24 16x16",
          "type": "image/x-icon"
        }
      ],
      "start_url": ".",
      "display": "standalone",
      "theme_color": "#000000",
      "background_color": "#ffffff"
    }`
      }
    },
    packageJson: {
      "name": "react-app",
      "version": "0.1.0",
      "private": true,
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-scripts": "5.0.1"
      },
      "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
      },
      "eslintConfig": {
        "extends": [
          "react-app",
          "react-app/jest"
        ]
      },
      "browserslist": {
        "production": [
          ">0.2%",
          "not dead",
          "not op_mini all"
        ],
        "development": [
          "last 1 chrome version",
          "last 1 firefox version",
          "last 1 safari version"
        ]
      }
    },
    gitignore: `# Dependencies
    node_modules/
    /.pnp
    .pnp.js
    
    # Testing
    /coverage
    
    # Production
    /build
    
    # Misc
    .DS_Store
    .env.local
    .env.development.local
    .env.test.local
    .env.production.local
    
    # Logs
    npm-debug.log*
    yarn-debug.log*
    yarn-error.log*
    
    # IDE
    .vscode/
    .idea/
    *.swp
    *.swo`,
    envExample: `# React App Environment Variables
    # Copy this file to .env.local and update with your values
    
    # API Configuration
    REACT_APP_API_URL=http://localhost:3001
    REACT_APP_API_KEY=your_api_key_here
    
    # Feature Flags
    REACT_APP_ENABLE_ANALYTICS=false
    REACT_APP_DEBUG_MODE=false`
  },
  
  'node-api': {
    name: 'Node.js API',
    description: 'A RESTful API built with Node.js and Express',
    structure: {
      'src/': {
        'controllers/': {
          'userController.js': `const User = require('../models/User');
    
    exports.getAllUsers = async (req, res) => {
      try {
        const users = await User.find();
        res.json(users);
      } catch (error) {
        res.status(500).json({ error: error.message });
      }
    }
    
    exports.createUser = async (req, res) => {
      try {
        const user = new User(req.body);
        await user.save();
        res.status(201).json(user);
      } catch (error) {
        res.status(400).json({ error: error.message });
      }
    };`
      },
      'models/': {
        'User.js': `const mongoose = require('mongoose');
    
    const userSchema = new mongoose.Schema({
      name: {
        type: String,
        required: true,
        trim: true
      },
      email: {
        type: String,
        required: true,
        unique: true,
        lowercase: true
      },
      createdAt: {
        type: Date,
        default: Date.now
      }
    });
    
    module.exports = mongoose.model('User', userSchema);`
      },
      'routes/': {
        'users.js': `const express = require('express');
    const router = express.Router();
    const userController = require('../controllers/userController');
    
    router.get('/', userController.getAllUsers);
    router.post('/', userController.createUser);
    
    module.exports = router;`
      },
      'middleware/': {
        'auth.js': `const jwt = require('jsonwebtoken');
    
    const authenticateToken = (req, res, next) => {
      const authHeader = req.headers['authorization'];
      const token = authHeader && authHeader.split(' ')[1];
    
      if (!token) {
        return res.sendStatus(401);
      }
    
      jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
      });
    };
    
    module.exports = { authenticateToken };`
      },
      'config/': {
        'database.js': `const mongoose = require('mongoose');
    
    const connectDB = async () => {
      try {
        await mongoose.connect(process.env.MONGODB_URI, {
          useNewUrlParser: true,
          useUnifiedTopology: true,
        });
        console.log('MongoDB connected successfully');
      } catch (error) {
        console.error('Database connection error:', error);
        process.exit(1);
      }
    };
    
    module.exports = connectDB;`
      },
      'utils/': {},
      'app.js': `const express = require('express');
    const cors = require('cors');
    const helmet = require('helmet');
    const morgan = require('morgan');
    require('dotenv').config();
    
    const connectDB = require('./config/database');
    const userRoutes = require('./routes/users');
    
    const app = express();
    
    // Connect to database
    connectDB();
    
    // Middleware
    app.use(helmet());
    app.use(cors());
    app.use(morgan('combined'));
    app.use(express.json());
    app.use(express.urlencoded({ extended: true }));
    
    // Routes
    app.use('/api/users', userRoutes);
    
    // Health check
    app.get('/health', (req, res) => {
      res.json({ status: 'OK', timestamp: new Date().toISOString() });
    });
    
    // Error handling middleware
    app.use((err, req, res, next) => {
      console.error(err.stack);
      res.status(500).json({ error: 'Something went wrong!' });
    });
    
    // 404 handler
    app.use('*', (req, res) => {
      res.status(404).json({ error: 'Route not found' });
    });
    
    module.exports = app;`
      },
      'tests/': {
        'user.test.js': `const request = require('supertest');
    const app = require('../src/app');
    
    describe('User API', () => {
      test('GET /api/users should return users array', async () => {
        const response = await request(app)
          .get('/api/users')
          .expect(200);
        
        expect(Array.isArray(response.body)).toBe(true);
      });
    });`
      },
      'server.js': `const app = require('./src/app');
    
    const PORT = process.env.PORT || 3000;
    
    app.listen(PORT, () => {
      console.log(\`Server running on port \${PORT}\`);
    });`
    },
    packageJson: {
      "name": "node-api",
      "version": "1.0.0",
      "description": "RESTful API built with Node.js and Express",
      "main": "server.js",
      "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js",
        "test": "jest",
        "test:watch": "jest --watch"
      },
      "dependencies": {
        "express": "^4.18.2",
        "mongoose": "^7.5.0",
        "cors": "^2.8.5",
        "helmet": "^7.0.0",
        "morgan": "^1.10.0",
        "dotenv": "^16.3.1",
        "jsonwebtoken": "^9.0.2"
      },
      "devDependencies": {
        "nodemon": "^3.0.1",
        "jest": "^29.6.2",
        "supertest": "^6.3.3"
      },
      "keywords": ["api", "nodejs", "express", "mongodb"],
      "author": "",
      "license": "MIT"
    },
    gitignore: `# Dependencies
    node_modules/
    npm-debug.log*
    yarn-debug.log*
    yarn-error.log*
    
    # Runtime data
    pids
    *.pid
    *.seed
    *.pid.lock
    
    # Coverage directory used by tools like istanbul
    coverage/
    *.lcov
    
    # Environment variables
    .env
    .env.local
    .env.development.local
    .env.test.local
    .env.production.local
    
    # Logs
    logs
    *.log
    
    # Runtime data
    pids
    *.pid
    *.seed
    *.pid.lock
    
    # Optional npm cache directory
    .npm
    
    # Optional eslint cache
    .eslintcache
    
    # IDE
    .vscode/
    .idea/
    *.swp
    *.swo
    
    # OS
    .DS_Store
    Thumbs.db`,
    envExample: `# Server Configuration
    PORT=3000
    NODE_ENV=development
    
    # Database
    MONGODB_URI=mongodb://localhost:27017/your_database_name
    
    # JWT Secret
    JWT_SECRET=your_super_secret_jwt_key_here
    
    # API Keys
    API_KEY=your_api_key_here
    
    # CORS
    CORS_ORIGIN=http://localhost:3000`
      },
      
      'fullstack': {
        name: 'Full-Stack Application',
        description: 'Complete full-stack application with React frontend and Node.js backend',
        structure: {
          'client/': {
            'src/': {
              'components/': {},
              'pages/': {},
              'hooks/': {},
              'services/': {
                'api.js': `const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';
    
    class ApiService {
      async request(endpoint, options = {}) {
        const url = \`\${API_BASE_URL}\${endpoint}\`;
        const config = {
          headers: {
            'Content-Type': 'application/json',
            ...options.headers,
          },
          ...options,
        };
    
        const response = await fetch(url, config);
        
        if (!response.ok) {
          throw new Error(\`HTTP error! status: \${response.status}\`);
        }
        
        return response.json();
      }
    
      async get(endpoint) {
        return this.request(endpoint);
      }
    
      async post(endpoint, data) {
        return this.request(endpoint, {
          method: 'POST',
          body: JSON.stringify(data),
        });
      }
    }
    
    export default new ApiService();`
              },
              'utils/': {},
              'App.js': `import React from 'react';
    import './App.css';
    
    function App() {
      return (
        <div className="App">
          <header className="App-header">
            <h1>Full-Stack Application</h1>
            <p>Frontend and Backend working together</p>
          </header>
        </div>
      );
    }
    
    export default App;`
              },
              'public/': {
                'index.html': `<!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>Full-Stack App</title>
      </head>
      <body>
        <div id="root"></div>
      </body>
    </html>`
              },
              'package.json': `{
        "name": "fullstack-client",
        "version": "0.1.0",
        "private": true,
        "dependencies": {
          "react": "^18.2.0",
          "react-dom": "^18.2.0",
          "react-scripts": "5.0.1"
        },
        "scripts": {
          "start": "react-scripts start",
          "build": "react-scripts build",
          "test": "react-scripts test"
        },
        "proxy": "http://localhost:3001"
      }`
            },
            'server/': {
              'src/': {
                'app.js': `const express = require('express');
    const cors = require('cors');
    const path = require('path');
    require('dotenv').config();
    
    const app = express();
    
    // Middleware
    app.use(cors());
    app.use(express.json());
    
    // Serve static files from React build
    if (process.env.NODE_ENV === 'production') {
      app.use(express.static(path.join(__dirname, '../../client/build')));
    }
    
    // API routes
    app.get('/api/health', (req, res) => {
      res.json({ status: 'OK', message: 'Server is running' });
    });
    
    // Catch all handler for React app
    if (process.env.NODE_ENV === 'production') {
      app.get('*', (req, res) => {
        res.sendFile(path.join(__dirname, '../../client/build/index.html'));
      });
    }
    
    module.exports = app;`
              },
              'server.js': `const app = require('./src/app');
    
    const PORT = process.env.PORT || 3001;
    
    app.listen(PORT, () => {
      console.log(\`Server running on port \${PORT}\`);
    });`,
              'package.json': `{
        "name": "fullstack-server",
        "version": "1.0.0",
        "description": "Backend server for full-stack application",
        "main": "server.js",
        "scripts": {
          "start": "node server.js",
          "dev": "nodemon server.js",
          "build": "cd ../client && npm run build"
        },
        "dependencies": {
          "express": "^4.18.2",
          "cors": "^2.8.5",
          "dotenv": "^16.3.1"
        },
        "devDependencies": {
          "nodemon": "^3.0.1"
        }
      }`
            },
          },
            packageJson: {
              "name": "fullstack-app",
              "version": "1.0.0",
              "description": "Full-stack application with React and Node.js",
              "scripts": {
                "dev": "concurrently \"npm run server:dev\" \"npm run client:dev\"",
                "server:dev": "cd server && npm run dev",
                "client:dev": "cd client && npm start",
                "build": "cd client && npm run build",
                "start": "cd server && npm start",
                "install:all": "npm install && cd client && npm install && cd ../server && npm install"
              },
              "devDependencies": {
                "concurrently": "^8.2.0"
              },
              "keywords": ["fullstack", "react", "nodejs", "express"],
              "author": "",
              "license": "MIT"
            },
            gitignore: `# Dependencies
    node_modules/
    client/node_modules/
    server/node_modules/
    
    # Production builds
    client/build/
    server/dist/
    
    # Environment variables
    .env
    .env.local
    .env.development.local
    .env.test.local
    .env.production.local
    client/.env*
    server/.env*
    
    # Logs
    logs
    *.log
    npm-debug.log*
    yarn-debug.log*
    yarn-error.log*
    
    # Runtime data
    pids
    *.pid
    *.seed
    *.pid.lock
    
    # Coverage
    coverage/
    
    # IDE
    .vscode/
    .idea/
    *.swp
    *.swo
    
    # OS
    .DS_Store
    Thumbs.db`,
            envExample: `# Full-Stack Application Environment Variables
    
    # Server Configuration
    PORT=3001
    NODE_ENV=development
    
    # Client Configuration
    REACT_APP_API_URL=http://localhost:3001
    
    # Database (if using)
    DATABASE_URL=your_database_connection_string
    
    # API Keys
    API_KEY=your_api_key_here`
      }
    };
    
    // Generate README content
    const generateReadme = (projectName, template, description = '') => {
      const templateInfo = projectTemplates[template];
      const projectTitle = projectName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      
      let readme = `# ${projectTitle}
    
    ${description || templateInfo.description}
    
    ## 📋 Table of Contents
    - [Features](#features)
    - [Prerequisites](#prerequisites)
    - [Installation](#installation)
    - [Usage](#usage)
    - [Project Structure](#project-structure)
    - [Scripts](#scripts)
    - [Environment Variables](#environment-variables)
    - [Contributing](#contributing)
    - [License](#license)
    
    ## ✨ Features
    
    `;
    
      // Add template-specific features
      if (template === 'react-app') {
        readme += `- Modern React 18 with hooks
    - Responsive design
    - CSS modules support
    - Hot reload development
    - Production build optimization
    - PWA ready
    
    `;
      } else if (template === 'node-api') {
        readme += `- RESTful API architecture
    - MongoDB integration with Mongoose
    - JWT authentication middleware
    - Request validation
    - Error handling
    - API documentation ready
    - Unit testing setup
    
    `;
      } else if (template === 'fullstack') {
        readme += `- React frontend with modern hooks
    - Node.js/Express backend
    - API integration
    - Concurrent development setup
    - Production build process
    - Environment configuration
    
    `;
      }
    
      readme += `## 🔧 Prerequisites
    
    Before running this project, make sure you have the following installed:
    - [Node.js](https://nodejs.org/) (version 16 or higher)
    - [npm](https://www.npmjs.com/) or [yarn](https://yarnpkg.com/)`;
    
      if (template === 'node-api' || template === 'fullstack') {
        readme += `
    - [MongoDB](https://www.mongodb.com/) (if using database features)`;
      }
    
      readme += `
    
    ## 🚀 Installation
    
    1. **Clone the repository**
       \`\`\`bash
       git clone https://github.com/yourusername/${projectName}.git
       cd ${projectName}
       \`\`\`
    
    2. **Install dependencies**
       \`\`\`bash`;
    
      if (template === 'fullstack') {
        readme += `
       npm run install:all
       \`\`\`
       
       Or install manually:
       \`\`\`bash
       # Root dependencies
       npm install
       
       # Client dependencies
       cd client && npm install
       
       # Server dependencies
       cd ../server && npm install`;
      } else {
        readme += `
       npm install`;
      }
    
      readme += `
       \`\`\`
    
    3. **Environment Setup**
       \`\`\`bash
       cp .env.example .env
       \`\`\`
       
       Update the \`.env\` file with your configuration values.
    
    ## 💻 Usage
    
    ### Development Mode
    
    \`\`\`bash`;
    
      if (template === 'fullstack') {
        readme += `
    # Run both client and server concurrently
    npm run dev
    
    # Or run separately:
    npm run client:dev  # Frontend only
    npm run server:dev  # Backend only`;
      } else {
        readme += `
    npm run dev`;
      }
    
      readme += `
    \`\`\`
    
    ### Production Mode
    
    \`\`\`bash`;
    
      if (template === 'react-app') {
        readme += `
    npm run build
    npm start`;
      } else if (template === 'fullstack') {
        readme += `
    npm run build
    npm start`;
      } else {
        readme += `
    npm start`;
      }
    
      readme += `
    \`\`\`
    
    ## 📁 Project Structure
    
    \`\`\`
    ${projectName}/
    ├── README.md
    ├── package.json
    ├── .gitignore
    ├── .env.example`;
    
      if (template === 'react-app') {
        readme += `
    ├── public/
    │   ├── index.html
    │   └── manifest.json
    └── src/
        ├── components/
        ├── pages/
        ├── hooks/
        ├── utils/
        ├── assets/
        ├── App.js
        ├── App.css
        ├── index.js
        └── index.css`;
      } else if (template === 'node-api') {
        readme += `
    ├── server.js
    ├── src/
        │   ├── controllers/
        │   ├── models/
        │   ├── routes/
        │   ├── middleware/
        │   ├── config/
        │   ├── utils/
        │   └── app.js
        └── tests/`;
      } else if (template === 'fullstack') {
        readme += `
    ├── client/
        │   ├── public/
        │   ├── src/
        │   └── package.json
        └── server/
            ├── src/
            ├── server.js
            └── package.json`;
      }
    
      readme += `
    \`\`\`
    
    ## 📜 Scripts
    
    | Script | Description |
    |--------|-------------|
    `;
      if (template === 'react-app') {
        readme += `
    | \`npm start\` | Start development server |
    | \`npm run build\` | Build for production |
    | \`npm test\` | Run tests |`;
      } else if (template === 'node-api') {
        readme += `
    | \`npm start\` | Start production server |
    | \`npm run dev\` | Start development server with hot reload |
    | \`npm test\` | Run tests |
    | \`npm run test:watch\` | Run tests in watch mode |`;
      } else if (template === 'fullstack') {
        readme += `
    | \`npm run dev\` | Start both client and server in development |
    | \`npm run client:dev\` | Start only the React frontend |
    | \`npm run server:dev\` | Start only the Node.js backend |
    | \`npm run build\` | Build the React app for production |
    | \`npm start\` | Start production server |
    | \`npm run install:all\` | Install all dependencies |`;
      }
    
      readme += `
    
    ## 🔐 Environment Variables
    
    Copy \`.env.example\` to \`.env\` and configure the following variables:
    
    `;
    
      if (template === 'react-app') {
        readme += `| Variable | Description | Default |
    |----------|-------------|---------|
    | \`REACT_APP_API_URL\` | Backend API URL | \`http://localhost:3001\` |
    | \`REACT_APP_API_KEY\` | API key for external services | - |`;
      } else if (template === 'node-api') {
        readme += `| Variable | Description | Default |
    |----------|-------------|---------|
    | \`PORT\` | Server port | \`3000\` |
    | \`NODE_ENV\` | Environment mode | \`development\` |
    | \`MONGODB_URI\` | MongoDB connection string | - |
    | \`JWT_SECRET\` | JWT signing secret | - |`;
      } else if (template === 'fullstack') {
        readme += `| Variable | Description | Default |
    |----------|-------------|---------|
    | \`PORT\` | Server port | \`3001\` |
    | \`NODE_ENV\` | Environment mode | \`development\` |
    | \`REACT_APP_API_URL\` | Backend API URL | \`http://localhost:3001\` |`;
      }
    
      readme += `
    
    ## 🤝 Contributing
    
    1. Fork the repository
    2. Create your feature branch (\`git checkout -b feature/amazing-feature\`)
    3. Commit your changes (\`git commit -m 'Add some amazing feature'\`)
    4. Push to the branch (\`git push origin feature/amazing-feature\`)
    5. Open a Pull Request
    
    ## 📄 License
    
    This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
    
    ## 🆘 Support
    
    If you have any questions or run into issues, please:
    1. Check the [Issues](https://github.com/yourusername/${projectName}/issues) page
    2. Create a new issue if your problem isn't already reported
    3. Provide as much detail as possible about your environment and the issue
    
    ---
    
    **Happy coding! 🚀**
    `;
    
      return readme;
    }

    app.post('/generate', upload.fields([
      { name: 'files', maxCount: 200 },
      { name: 'zip', maxCount: 1 }
    ]), async (req, res) => {
      try {
        const { repoName = 'my-project', template = 'react-app', description = '' } = req.body;
        const files = Array.isArray(req.files) ? req.files : (req.files?.files || []);
        
        // Get template configuration
        const templateConfig = projectTemplates[template];
        if (!templateConfig) {
          return res.status(400).json({ error: 'Invalid template selected' });
        }
    
        // Create ZIP archive
        const archive = archiver('zip', { zlib: { level: 9 } });
        
        res.attachment(`${repoName}.zip`);
        archive.pipe(res);
    
        // Add README.md
        const readmeContent = generateReadme(repoName, template, description);
        archive.append(readmeContent, { name: 'README.md' });
    
        // Add package.json
        const packageJson = { ...templateConfig.packageJson };
        packageJson.name = repoName;
        if (description) packageJson.description = description;
        archive.append(JSON.stringify(packageJson, null, 2), { name: 'package.json' });
    
        // Add .gitignore
        archive.append(templateConfig.gitignore, { name: '.gitignore' });
    
        // Add .env.example
        archive.append(templateConfig.envExample, { name: '.env.example' });
    
        // Add LICENSE file
        const licenseContent = `MIT License
    
        Copyright (c) ${new Date().getFullYear()} ${repoName}
    
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
    
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
    
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.`;
        archive.append(licenseContent, { name: 'LICENSE' });
    
        // Add .editorconfig
        const editorConfig = `root = true
    
        [*]
        charset = utf-8
        end_of_line = lf
        indent_style = space
        indent_size = 2
        insert_final_newline = true
        trim_trailing_whitespace = true
    
        [*.md]
        trim_trailing_whitespace = false`;
        archive.append(editorConfig, { name: '.editorconfig' });
    
        // Function to add template structure
        function addTemplateStructure(structure, basePath = '') {
          for (const [name, content] of Object.entries(structure)) {
            const fullPath = basePath ? `${basePath}/${name}` : name;
            
            if (typeof content === 'object' && content !== null && !Buffer.isBuffer(content)) {
              // It's a directory
              addTemplateStructure(content, fullPath);
            } else {
              // It's a file
              archive.append(content || '', { name: fullPath });
            }
          }
        }
    
        // Add template structure
        addTemplateStructure(templateConfig.structure);
    
        // Process uploaded files
        if (files.length > 0) {
          // ... existing file processing code ...
          const languageFolders = {
            '.js': 'javascript',
            '.jsx': 'javascript', 
            '.ts': 'typescript',
            '.tsx': 'typescript',
            '.py': 'python',
            '.java': 'java',
            '.cpp': 'cpp',
            '.c': 'c',
            '.cs': 'csharp',
            '.php': 'php',
            '.rb': 'ruby',
            '.go': 'go',
            '.rs': 'rust',
            '.swift': 'swift',
            '.kt': 'kotlin',
            '.html': 'web',
            '.css': 'web',
            '.scss': 'web',
            '.sass': 'web',
            '.vue': 'web',
            '.json': 'config',
            '.xml': 'config',
            '.yaml': 'config',
            '.yml': 'config',
            '.md': 'docs',
            '.txt': 'docs'
          };
    
          for (const file of files) {
            const ext = path.extname(file.originalname).toLowerCase();
            const folder = languageFolders[ext] || 'misc';
            const filePath = `uploaded-files/${folder}/${file.originalname}`;
            archive.append(file.buffer, { name: filePath });
          }
        }
    
        // Handle ZIP file uploads (multipart 'zip' or base64 'zipFiles')
        if (req.files && req.files.zip && req.files.zip[0]) {
          try {
            const zipBuffer = req.files.zip[0].buffer;
            const zip = new AdmZip(zipBuffer);
            const entries = zip.getEntries();
            entries.forEach(entry => {
              if (!entry.isDirectory) {
                const filePath = `uploaded-files/extracted/${entry.entryName}`;
                archive.append(entry.getData(), { name: filePath });
              }
            });
          } catch (zipError) {
            console.error('Error processing ZIP file:', zipError);
          }
        } else if (req.body.zipFiles) {
          try {
            const zipBuffer = Buffer.from(req.body.zipFiles, 'base64');
            const zip = new AdmZip(zipBuffer);
            const entries = zip.getEntries();
            entries.forEach(entry => {
              if (!entry.isDirectory) {
                const filePath = `uploaded-files/extracted/${entry.entryName}`;
                archive.append(entry.getData(), { name: filePath });
              }
            });
          } catch (zipError) {
            console.error('Error processing ZIP file:', zipError);
          }
        }
    
        // Handle text snippets
        if (req.body.snippets) {
          try {
            const snippets = JSON.parse(req.body.snippets);
            snippets.forEach((snippet, index) => {
              const fileName = snippet.filename || `snippet-${index + 1}.txt`;
              const filePath = `snippets/${fileName}`;
              archive.append(snippet.content, { name: filePath });
            });
          } catch (snippetError) {
            console.error('Error processing snippets:', snippetError);
          }
        }
    
        archive.finalize();
 
       } catch (error) {
         console.error('Error generating repository:', error);
         res.status(500).json({ error: 'Failed to generate repository' });
       }
     });
 
 app.listen(PORT, () => {
   console.log(`RespoGen server running at http://localhost:${PORT}`);
 });